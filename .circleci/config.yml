version: 2.1

jobs:
  test:
    docker:
      - image: node:12.18-alpine
    steps:
      - checkout
      - restore_cache:
          name: Restore build cache
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install yarn dependencies
          command: yarn
      - save_cache:
          name: Save build cache
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run tests with coverage
          command: yarn coverage
      - run:
          name: Run code lint
          command: yarn lint

  build:
    docker:
      - image: node:12.18-alpine
    steps:
      - checkout
      - run:
          name: Install yarn dependencies
          command: yarn
      - run:
          name: NextJS build
          command: yarn build
      - run:
          name: NextJS static export
          command: yarn export
      - run:
          name: Build and push docker containers
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
            docker-compose push

  deploy:
    machine: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "69:f4:84:f0:e9:82:8a:88:4e:f2:94:a2:25:80:f1:cb"
      - run:
          name: Copy docker compose files to remote server
          command: scp -r docker-compose.yml docker-compose.prod.yml .docker/ out/ $DEPLOY_USER@$DEPLOY_HOST:~/
      - run:
          name: Remotely pull docker images, then restart the container
          command: |
            ssh -t $DEPLOY_USER@$DEPLOY_HOST "
              docker pull matfin/cinematt:latest &&
              docker stop cinematt &&
              docker rm cinematt &&
              docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            "

workflows:
  version: 2
  build_and_test:
    jobs:
      - test:
          filters:
            branches:
              ignore: main
      - build:
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main
